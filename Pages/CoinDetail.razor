@page "/{CoinId}"
@inject HttpClient Http
@using System.Text.Json.Serialization;
<PageTitle>@CoinId</PageTitle>

@if (coinData != null && coinData.Count > 0)
{
    @foreach (var coin in coinData)
    {
                  <div class="container">
                    <h3>
                    <img src="@coin.Image" style="height: 50px; width: 50px; vertical-align: middle; margin-right: 5px;">
                    @coin.Name
                    </h3>
                    <strong><h2 class="card-text">
                        €@coin.CurrentPrice.ToString("N2")
                    </h2></strong>
                    @if (@coin.PriceChange24H > 0)
                    {
                        <p><small class="text-success">+€@coin.PriceChange24H.ToString("N2") (@coin.PriceChangePercentage24H%) in the last 24 hours.</small></p>
                    }
                    else
                    {
                        <p class="card-text"><small class="text-danger">€@coin.PriceChange24H.ToString("N2") (@coin.PriceChangePercentage24H%) in the last 24 hours.</small></p>
                    }
                    <div class="row">
                    <div class="col-md-3 mt-2">
                        <p>Market Cap</p>
                        <p class="text-muted">€@coin.MarketCap.ToString("N2")</p>
                    </div>
                    <div class="col-md-3 mt-2">
                        <p>All Time High</p>
                        <p class="text-muted">€@coin.Ath.ToString("N2") (@coin.AthDate)</p>
                    </div>
                    <div class="col-md-3 mt-2">
                        <p>All Time Low</p>
                        <p class="text-muted">€@coin.Atl.ToString("N2") (@coin.AtlDate)</p>
                    </div>
                    </div>
                    <div class="row">
                    <div class="col-md-3 mt-2">
                        <p>Total Volume</p>
                        <p class="text-muted">€@coin.TotalVolume</p>
                    </div>
                    <div class="col-md-3 mt-2">
                        <p>Circulating Supply</p>
                        <p class="text-muted">@coin.Circulating_Supply</p>
                    </div>
                    <div class="col-md-3 mt-2">
                        <p>Max Supply</p>
                        <p class="text-muted">@coin.MaxSupply</p>
                    </div>
                    </div>
                    <div class="input-group mb-5">
                    @* @oninput="Calculator" doesnt work as well. *@
                    <input type="number" @bind="inputAmount"  class="form-control rounded bg-dark text-white" aria-label="Search" aria-describedby="search-addon" />
                    <button @onclick="Calculator" class="btn btn-outline-info text-white">Calculate</button>
                    </div>
                    @if (calculatedAmount > 0) {
                        <p class="mt-3">@calculatedAmount | @coin.Name</p>
                    }
                </div>
                
    }
}
else if (noCoinFound)
{
    <p>No coin found with that ID.</p>
}

@code {
    [Parameter]
    public string? CoinId { get; set; }
    private List<CoinData>? coinData;
    private bool noCoinFound = false;
    private decimal inputAmount = 100;
    private decimal calculatedAmount;


    protected override async Task OnInitializedAsync()
    {
        await SearchCoinById();
    }

    private async Task SearchCoinById()
    {
        if (!string.IsNullOrWhiteSpace(CoinId))
        {
            noCoinFound = false;
            var url = $"https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&ids={CoinId.ToLower()}";
            var response = await Http.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                coinData = System.Text.Json.JsonSerializer.Deserialize<List<CoinData>>(json);

                if (coinData == null || coinData.Count == 0)
                {
                    noCoinFound = true;
                }
            }
        }
    }
    public void Calculator() {
        foreach (var coindata in coinData) {
            calculatedAmount = inputAmount / coindata.CurrentPrice;
        }
    }
    public class CoinData
    {
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("image")]
        public string? Image { get; set; }

        [JsonPropertyName("current_price")]
        public decimal CurrentPrice { get; set; }

        [JsonPropertyName("price_change_24h")]
        public decimal PriceChange24H { get; set; }

        [JsonPropertyName("price_change_percentage_24h")]
        public decimal PriceChangePercentage24H { get; set; }

        [JsonPropertyName("market_cap")]
        public decimal MarketCap { get; set; }

        [JsonPropertyName("ath")]
        public decimal Ath { get; set; }

        [JsonPropertyName("ath_date")]
        public DateTime AthDate { get; set; }

        [JsonPropertyName("atl")]
        public decimal Atl { get; set; }

        [JsonPropertyName("atl_date")]
        public DateTime AtlDate { get; set; }

        [JsonPropertyName("total_volume")]
        public decimal? TotalVolume { get; set; }

        [JsonPropertyName("circulating_supply")]
        public decimal? Circulating_Supply { get; set; }

        [JsonPropertyName("max_supply")]
        public decimal? MaxSupply { get; set; }
    }
}
