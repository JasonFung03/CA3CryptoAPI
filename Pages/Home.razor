@page "/"
@inject HttpClient Http
@using System.Text.Json.Serialization;

<PageTitle>Home</PageTitle>

@if (coinDataList != null && coinDataList.Count > 0)
{
    <h1 class="text-white mt-5">Cryptocurrency Prices by Market Cap</h1>
    <hr class="text-white">
    <table class="table">
        <thead>
            <tr>
                <th class="text-white">Rank</th>
                <th class="text-white">Name</th>
                <th class="text-white">Current Price</th>
                <th class="text-white">Price Change 24 Hours</th>
                <th class="text-white">Market Cap</th>
                <th class="text-white">All Time High</th>
                <th class="text-white">All Time Low</th>
                <th class="text-white">Volume (24h)</th>
            </tr>
        </thead>
        <tbody>
                @foreach(var coinData in coinDataList)
                {
                <tr>
                    <td class="text-white">@coinData.MarketCapRank</td>
                    <td class="text-white">
                    <img src="@coinData.Image" style="height: 20px; width: 20px; vertical-align: middle; margin-right: 5px;">
                    @coinData.Name
                    </td>
                    <td class="text-white">€@coinData.CurrentPrice.ToString("N2")</td>
                    <td class="text-white">€@coinData.PriceChange24H.ToString("N2") (@coinData.PriceChangePercentage24H%)</td>
                    <td class="text-white">€@coinData.MarketCap.ToString("N2")</td>
                    <td class="text-white">€@coinData.Ath.ToString("N2") (@coinData.AthDate)</td>
                    <td class="text-white">€@coinData.Atl.ToString("N2") (@coinData.AtlDate)</td>
                    <td class="text-white">€@coinData.TotalVolume.ToString("N2")</td>
                </tr>
                }
        </tbody>
    </table>
}
@code {
    private List<CoinData>? coinDataList;
    protected override async Task OnInitializedAsync()
    {
        await FetchCoinData();
    }
    private async Task FetchCoinData()
    {
        try
        {
            const string API_URL = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=100&page=1&sparkline=false&locale=en";
            var response = await Http.GetAsync(API_URL);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                coinDataList = System.Text.Json.JsonSerializer.Deserialize<List<CoinData>>(json);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public class CoinData
    {
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("image")]
        public string? Image { get; set; }

        [JsonPropertyName("current_price")]
        public decimal CurrentPrice { get; set; }

        [JsonPropertyName("price_change_24h")]
        public decimal PriceChange24H { get; set; }

        [JsonPropertyName("price_change_percentage_24h")]
        public decimal PriceChangePercentage24H { get; set; }

        [JsonPropertyName("market_cap")]
        public long MarketCap { get; set; }

        [JsonPropertyName("ath")]
        public decimal Ath { get; set; }

        [JsonPropertyName("ath_date")]
        public DateTime AthDate { get; set; }

        [JsonPropertyName("atl")]
        public decimal Atl { get; set; }

        [JsonPropertyName("atl_date")]
        public DateTime AtlDate { get; set; }

        [JsonPropertyName("market_cap_rank")]
        public int MarketCapRank { get; set; }

        [JsonPropertyName("total_volume")]
        public long TotalVolume { get; set; }
    }
}