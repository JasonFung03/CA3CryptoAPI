@page "/"
@inject HttpClient Http
@using System.Text.Json.Serialization;

<PageTitle>Crypto Tracker</PageTitle>
<h1 class="text-white mt-5">Search for a coin</h1>
<hr class="text-white">
<div class="input-group mb-5">
    <input @bind="searchQuery" class="form-control rounded bg-dark text-white" placeholder="Enter coin ID" aria-label="Search" aria-describedby="search-addon" />
    <button @onclick="SearchCoinById" class="btn btn-outline-info text-white">Search</button>
</div>

@if (coinData != null && coinData.Count > 0)
{
    @foreach (var coin in coinData)
        {
            <div class="card mb-5">
                <div class="card-body bg-dark">
                    <h3>
                        <img src="@coin.Image" style="height: 50px; width: 50px; vertical-align: middle; margin-right: 5px;">
                        @coin.Name
                    </h3>
                    <h6 class="card-text">
                        €@coin.CurrentPrice.ToString("N2")
                    </h6>
                   @if (@coin.PriceChange24H > 0)
                        {
                        <p class="card-text"><small class="text-success">+€@coin.PriceChange24H.ToString("N2") (@coin.PriceChangePercentage24H%) in the last 24 hours.</small></p>
                        }
                        else
                        {
                        <p class="card-text"><small class="text-danger">€@coin.PriceChange24H.ToString("N2") (@coin.PriceChangePercentage24H%) in the last 24 hours.</small></p>
                        }
                </div>
            </div>
        }
    }  else if (noCoinFound) {
        <p>No coin found with that ID.</p>
 }

@if (coinDataList != null && coinDataList.Count > 0)
{
    <h1 class="text-white mt-5">Cryptocurrency Prices by Market Cap</h1>
    <hr class="text-white">
    <table class="table">
        <thead>
            <tr>
                <th class="text-white">Rank</th>
                <th class="text-white">Name</th>
                <th class="text-white">Current Price</th>
                <th class="text-white">Price Change 24 Hours</th>
                <th class="text-white">Market Cap</th>
                <th class="text-white">All Time High</th>
                <th class="text-white">All Time Low</th>
                <th class="text-white">Volume (24h)</th>
            </tr>
        </thead>
        <tbody>
                @for (int i = (currentPage - 1) * pageSize; i < Math.Min(currentPage * pageSize, coinDataList.Count); i++)
                {
                var coinData = coinDataList[i];
                <tr>
                    <td class="text-white">@coinData.MarketCapRank</td>
                    <td class="text-white">
                    <img src="@coinData.Image" style="height: 20px; width: 20px; vertical-align: middle; margin-right: 5px;">
                    @coinData.Name
                    </td>
                    <td class="text-white">€@coinData.CurrentPrice.ToString("N2")</td>
                    @if (@coinData.PriceChange24H > 0)
                        {
                            <td class="text-success">€@coinData.PriceChange24H.ToString("N2") (@coinData.PriceChangePercentage24H%)</td>
                        } else {
                            <td class="text-danger">€@coinData.PriceChange24H.ToString("N2") (@coinData.PriceChangePercentage24H%)</td>
                        }
                    <td class="text-white">€@coinData.MarketCap.ToString("N2")</td>
                    <td class="text-white">€@coinData.Ath.ToString("N2") (@coinData.AthDate)</td>
                    <td class="text-white">€@coinData.Atl.ToString("N2") (@coinData.AtlDate)</td>
                    <td class="text-white">€@coinData.TotalVolume.ToString("N2")</td>
                </tr>
                }
        </tbody>
    </table>
        <div class="pagination-controls d-flex justify-content-center">
        <button class="btn bg-primary m-2" @onclick="() => SetPage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
        <span class="align-self-center">Page @currentPage of 10</span>
        <button class="btn bg-primary m-2" @onclick="() => SetPage(currentPage + 1)" disabled="@(currentPage == 10)">Next</button>
    </div>
}
@code {
    private List<CoinData>? coinDataList;
    private List<CoinData>? coinData;
    private int currentPage = 1;
    private int pageSize = 10;
    private string? searchQuery;
    private bool noCoinFound = false;

    protected override async Task OnInitializedAsync()
    {
        await FetchCoinData();
    }

    void SetPage(int page)
    {
        currentPage = page;
    }

    private async Task FetchCoinData()
    {
        try
        {
            const string API_URL = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=100&page=1&sparkline=false&locale=en";
            var response = await Http.GetAsync(API_URL);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                coinDataList = System.Text.Json.JsonSerializer.Deserialize<List<CoinData>>(json);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task SearchCoinById()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            noCoinFound = false;
            var url = $"https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&ids={searchQuery.ToLower()}";
            var response = await Http.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                coinData = System.Text.Json.JsonSerializer.Deserialize<List<CoinData>>(json);

                if (coinData == null || coinData.Count == 0)
                {
                    noCoinFound = true;
                }
            }
        }
    }
    public class CoinData
    {
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("image")]
        public string? Image { get; set; }

        [JsonPropertyName("current_price")]
        public decimal CurrentPrice { get; set; }

        [JsonPropertyName("price_change_24h")]
        public decimal PriceChange24H { get; set; }

        [JsonPropertyName("price_change_percentage_24h")]
        public decimal PriceChangePercentage24H { get; set; }

        [JsonPropertyName("market_cap")]
        public long MarketCap { get; set; }

        [JsonPropertyName("ath")]
        public decimal Ath { get; set; }

        [JsonPropertyName("ath_date")]
        public DateTime AthDate { get; set; }

        [JsonPropertyName("atl")]
        public decimal Atl { get; set; }

        [JsonPropertyName("atl_date")]
        public DateTime AtlDate { get; set; }

        [JsonPropertyName("market_cap_rank")]
        public int MarketCapRank { get; set; }

        [JsonPropertyName("total_volume")]
        public long TotalVolume { get; set; }
    }
}