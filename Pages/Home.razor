@page "/"
@inject HttpClient Http
@using System.Text.Json.Serialization;

<PageTitle>Crypto Tracker</PageTitle>
<h1 class="mt-5">Search coins:</h1>
<hr class="text-white">
<div class="input-group mb-5">
    <input @bind="searchQuery" class="form-control rounded bg-dark text-white" placeholder="Enter a coin..." aria-label="Search" aria-describedby="search-addon" />
    <button @onclick="SearchCoins" class="btn btn-outline-info text-white">Search</button>
</div>

@if (searchResults != null && searchResults.Count > 0)
{
    <table class="table">
        <thead>
        </thead>
        <tbody>
            @for (int i = 0; i < Math.Min(5, searchResults.Count); i++)
            {
                var coin = searchResults[i];
                <tr>
                    <td><img src="@coin.Thumb" style="height: 20px; width: 20px;"></td>
                    <td class="text-white">@coin.Name</td>
                    <td>
                        <a href="@coin.Id"><button class="btn btn-warning">View More Details</button></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (coinDataList != null && coinDataList.Count > 0)
{
    <h1 class="text-white mt-5">Cryptocurrency Prices by Market Cap</h1>
    <hr class="text-white">
    <table class="table">
        <thead>
            <tr>
                <th class="text-white">Rank</th>
                <th class="text-white">Name</th>
                <th class="text-white">Current Price</th>
                <th class="text-white">Price Change 24 Hours</th>
                <th class="text-white">Market Cap</th>
                <th class="text-white">All Time High</th>
                <th class="text-white">All Time Low</th>
                <th class="text-white">Volume (24h)</th>
                <th class="text-white">View Details</th>
            </tr>
        </thead>
        <tbody>
                @for (int i = (currentPage - 1) * pageSize; i < Math.Min(currentPage * pageSize, coinDataList.Count); i++)
                {
                var coinData = coinDataList[i];
                <tr>
                    <td class="text-white">@coinData.MarketCapRank</td>
                    <td class="text-white">
                    <img src="@coinData.Image" style="height: 20px; width: 20px; vertical-align: middle; margin-right: 5px;">
                    @coinData.Name
                    </td>
                    <td class="text-white">€@coinData.CurrentPrice.ToString("N2")</td>
                    @if (@coinData.PriceChange24H > 0)
                        {
                            <td class="text-success">€@coinData.PriceChange24H.ToString("N2") (@coinData.PriceChangePercentage24H%)</td>
                        } else {
                            <td class="text-danger">€@coinData.PriceChange24H.ToString("N2") (@coinData.PriceChangePercentage24H%)</td>
                        }
                    <td class="text-white">€@coinData.MarketCap.ToString("N2")</td>
                    <td class="text-white">€@coinData.Ath.ToString("N2") (@coinData.AthDate)</td>
                    <td class="text-white">€@coinData.Atl.ToString("N2") (@coinData.AtlDate)</td>
                    <td class="text-white">€@coinData.TotalVolume.ToString("N2")</td>
                    <td><a href="@coinData.Id"><button class="btn btn-warning">View More Details</button></a></td>
                </tr>
                }
        </tbody>
    </table>
        <div class="pagination-controls d-flex justify-content-center">
        <button class="btn bg-primary m-2" @onclick="() => SetPage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
        <span class="align-self-center">Page @currentPage of 10</span>
        <button class="btn bg-primary m-2" @onclick="() => SetPage(currentPage + 1)" disabled="@(currentPage == 10)">Next</button>
    </div>
}
@code {
    private List<CoinData>? coinDataList;
    private List<CoinData>? coinData;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchQuery;
    private List<CoinData>? searchResults;
    protected override async Task OnInitializedAsync()
    {
        await FetchCoinData();
    }

    void SetPage(int page)
    {
        currentPage = page;
    }

    private async Task FetchCoinData()
    {
        try
        {
            const string API_URL = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=100&page=1&sparkline=false&locale=en";
            var response = await Http.GetAsync(API_URL);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                coinDataList = System.Text.Json.JsonSerializer.Deserialize<List<CoinData>>(json);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task SearchCoins()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var url = $"https://api.coingecko.com/api/v3/search?query={searchQuery}";
            var response = await Http.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = System.Text.Json.JsonSerializer.Deserialize<SearchResult>(json);
                searchResults = result.Coins;
            }
        }
    }

    public class SearchResult
    {
        [JsonPropertyName("coins")]
        public List<CoinData>? Coins { get; set; }
    }

    public class CoinData
    {
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("image")]
        public string? Image { get; set; }

        [JsonPropertyName("current_price")]
        public decimal CurrentPrice { get; set; }

        [JsonPropertyName("price_change_24h")]
        public decimal PriceChange24H { get; set; }

        [JsonPropertyName("price_change_percentage_24h")]
        public decimal PriceChangePercentage24H { get; set; }

        [JsonPropertyName("market_cap")]
        public long MarketCap { get; set; }

        [JsonPropertyName("ath")]
        public decimal Ath { get; set; }

        [JsonPropertyName("ath_date")]
        public DateTime AthDate { get; set; }

        [JsonPropertyName("atl")]
        public decimal Atl { get; set; }

        [JsonPropertyName("atl_date")]
        public DateTime AtlDate { get; set; }

        [JsonPropertyName("market_cap_rank")]
        public int? MarketCapRank { get; set; }

        [JsonPropertyName("total_volume")]
        public long TotalVolume { get; set; }

        [JsonPropertyName("thumb")]
        public string? Thumb { get; set; }
    }
}